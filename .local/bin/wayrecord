#!/bin/sh

# Usage:
# `$0`: Ask for recording type via menu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 window`: Record one of your visible windows
# `$0 vaapi`: Use GPU with Video Acceleration API
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.


#updateicon() { \
#    echo "$1" > /tmp/recordingicon
#    pkill -RTMIN+9 "${STATUSBAR:?}"
#    }

menu="$MENU -p"

function list_geometry () {
    [ "$2" = with_description ] && local append="\t\(.name)" || local append=
    swaymsg -t get_tree | jq -r '.. | (.nodes? // empty)[] | select(.'$1' and .pid) | "\(.rect.x),\(.rect.y) \(.rect.width)x\(.rect.height)'$append'"'
}

killrecording() {
    recpid="$(cat /tmp/recordingpid)"
    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$recpid"
    rm -f /tmp/recordingpid
#    updateicon ""
#    pkill -RTMIN+9 "${STATUSBAR:?}"
    # even after SIGTERM, wf-recorder may still run, so SIGKILL it.
    sleep 3
    kill -9 "$recpid"
#    pkill swcursor
    exit
    }

screencast() { \
    wf-recorder -a -c libx264rgb -f "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
#    updateicon "‚è∫Ô∏èüéôÔ∏è"
           }

video() { \
    wf-recorder -c libx264 -f "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
#    updateicon "‚è∫Ô∏è"
    }

window() { \
    windows=`list_geometry visible with_description`
    echo "$windows"
    choice=$(printf "$windows" | $menu "Which one")
    geometry="`echo \"$choice\" | cut -d$'\t' -f1`"
    wf-recorder -a -c libx264rgb -g "$geometry" -f "$HOME/window-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
#    updateicon "‚è∫Ô∏è"
    }

vaapi() { \
    wf-recorder -a -c h264_vaapi -d /dev/dri/renderD128 -f "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
#    updateicon "‚è∫Ô∏è"
    }

askrecording() { \
    choice=$(printf "screencast\\nvideo\\nvaapi\\nwindow" | $menu "Select recording style")
    case "$choice" in
        screencast) screencast;;
        video) video;;
        vaapi) vaapi;;
        window) window;;
    esac
    }

asktoend() { \
    response=$(prompt "Recording still active. End recording?" "echo Yes") &&
    [ "$response" = "Yes" ] &&  killrecording
    }


case "$1" in
    screencast) screencast;;
    video) video;;
    window) window;;
    vaapi) vaapi;;
    kill) killrecording;;
    *) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
