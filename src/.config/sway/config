# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

# font Terminus (TTF)
### Variables

# Run pure wayland
#xwayland disable

set {
    # Logo key. Use Mod1 for Alt.
    $mod    Mod4
    $alt    Mod1

    # Home row direction keys, like vim
    $left    h
    $down    j
    $up      k
    $right   l

    # Your preferred terminal emulator
    $term    foot
    
    # Your preferred application launcher
    # Note: pass the final command to swaymsg so that the resulting window can be opened
    # on the original workspace that the command was run on.
    $menu "$LAUNCHER"

}

exec {
    # Clipman configuration
    wl-paste -t text --watch clipman store --max-items=30 --histpath="~/.local/share/clipman/clipman.json" 1>> ~/.local/share/clipman/clipman.log 2>&1 &
    wl-paste -p -t text --watch clipman store -P --histpath="~/.local/share/clipman/clipman-primary.json"

    # Random background
    setbg

    # Notification
    dunst

    # Music daemon
    # mpd

    # foot server
    foot --server

    # emacs daemon
    emacs --daemon

    # auto night mode
    wlsunset -l 29.3 -L 52.3

    # systemctl & dbus
    systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK
    hash dbus-update-activation-environment 2>/dev/null && dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK
}

# # Default options
#for_window [class="^.*"] border pixel 2
default_border pixel
gaps inner 1
gaps outer 1

# Seat configuration
seat * hide_cursor 3000
seat * xcursor_theme Layan-cursors 40


# Defining colors
set {
    $background     #282a36
    $current_line   #44475a
    $foreground     #f8f8f2
    $comment        #6272a4
    $cyan           #8be9fd
    $green          #50fa7b
    $orange         #ffb86c
    $pink           #ff79c6
    $purple         #bd93f9
    $red            #ff5555
    $yellow         #f1fa8c
}

# Set some nice            colors       border      background      text            indicator    child_border
client.focused             $background  $pink       $background     $foreground     $purple
client.unfocused           $background  $purple     $background     $foreground     $pink
client.focused_inactive    $background  $green      $current_line   $foreground     $orange
client.urgent              $background  $red        $comment        $foreground     $cyan
client.placeholder         $background  $purple     $comment        $foreground     $yellow

# Workspaces:
set {
    $ws1     "1:"
    $ws2     "2:"
    $ws3     "3:" 
    $ws4     "4:" 
    $ws5     "5:"
    $ws6     "6:"
    $ws7     "7:"
    $ws8     "8:" 
    $ws9     "9:﬎"
    $ws10    "10:"
}
### Key bindings
bindsym {
    # switch the keyboard layout to English when $mod is pressed
    # Super_L exec "wkb-switch -s 0; wkb-switch -b"
    # Super_R exec "wkb-switch -s 0; wkb-switch -b"
    # switch to workspace
    $mod+1    workspace $ws1
    $mod+2    workspace $ws2
    $mod+3    workspace $ws3
    $mod+4    workspace $ws4
    $mod+5    workspace $ws5
    $mod+6    workspace $ws6
    $mod+7    workspace $ws7
    $mod+8    workspace $ws8
    $mod+9    workspace $ws9
    $mod+0    workspace $ws10

    # move focused container to workspace
    $mod+Shift+1    move container to workspace $ws1
    $mod+Shift+2    move container to workspace $ws2
    $mod+Shift+3    move container to workspace $ws3
    $mod+Shift+4    move container to workspace $ws4
    $mod+Shift+5    move container to workspace $ws5
    $mod+Shift+6    move container to workspace $ws6
    $mod+Shift+7    move container to workspace $ws7
    $mod+Shift+8    move container to workspace $ws8
    $mod+Shift+9    move container to workspace $ws9
    $mod+Shift+0    move container to workspace $ws10

    # move focused container to workspace & switch to workspace
    $mod+Control+1    move container to workspace $ws1; workspace $ws1
    $mod+Control+2    move container to workspace $ws2; workspace $ws2
    $mod+Control+3    move container to workspace $ws3; workspace $ws3
    $mod+Control+4    move container to workspace $ws4; workspace $ws4
    $mod+Control+5    move container to workspace $ws5; workspace $ws5
    $mod+Control+6    move container to workspace $ws6; workspace $ws6
    $mod+Control+7    move container to workspace $ws7; workspace $ws7
    $mod+Control+8    move container to workspace $ws8; workspace $ws8
    $mod+Control+9    move container to workspace $ws9; workspace $ws9
    $mod+Control+0    move container to workspace $ws10; workspace $ws10

}

# apps
for_window {
    [app_id=".*qutebrowser.*"] move container to workspace $ws2, focus
    [app_id=".*firefox.*"] move container to workspace $ws2, focus
    # [app_id="mpv*"] move container to workspace $ws4, focus
    [app_id=".*zathura.*"] move container to workspace $ws8, focus
    [app_id=".*libreoffice.*"] move container to workspace $ws7, focus, layout tabbed
    [app_id=".*[fF]oliate.*"] move container to workspace $ws8, focus
    [app_id=".*telegram.*"] move container to workspace $ws3, focus
    [app_id=".*cinny.*"] move container to workspace $ws3, focus, layout tabbed
    [app_id=".*Schildi.*"] move container to workspace $ws3, focus, layout tabbed
    [app_id=".*nheko.*"] move container to workspace $ws3, focus, layout tabbed
    [app_id=".*fluffychat.*"] move container to workspace $ws3, focus, layout tabbed
    [app_id=".*obs.*"] move container to workspace $ws4, focus
    [class="Flowblade"] move container to workspace $ws9, focus, layout tabbed
    [app_id=".*gimp.*"] move container to workspace $ws9, focus, layout tabbed
    [app_id="firefox" title="Firefox — Sharing Indicator"] kill
}

# Moving around:
bindsym {
    # Move your focus around
    $mod+$left    focus left
    $mod+$down    focus down
    $mod+$up      focus up
    $mod+$right   focus right
    # Or use $mod+[up|down|left|right]
    $mod+Left     focus left
    $mod+Down     focus down
    $mod+Up       focus up
    $mod+Right    focus right

    $alt+Tab      focus next
    
    # Move the focused window with the same, but add Shift
    $mod+Shift+$left     move left
    $mod+Shift+$down     move down
    $mod+Shift+$up       move up
    $mod+Shift+$right    move right
    # Ditto, with arrow keys
    $mod+Shift+Left     move left
    $mod+Shift+Down     move down
    $mod+Shift+Up       move up
    $mod+Shift+Right    move right
    
	#Resizing
    $mod+bracketleft     resize shrink width 100 px or 10 ppt
    $mod+bracketright    resize grow width 100 px or 10 ppt
    $mod+semicolon       resize shrink height 100 px or 10 ppt
    $mod+apostrophe      resize grow height 100 px or 10 ppt
    
    $mod+Shift+bracketleft     resize shrink width 1 px or 1 ppt
    $mod+Shift+bracketright    resize grow width 1 px or 1 ppt
    $mod+Shift+semicolon       resize shrink height 1 px or 1 ppt
    $mod+Shift+apostrophe      resize grow height 1 px or 1 ppt
    
    # Basics:
    #
    # Start a terminal
    $mod+Return       exec $term
    Super_R+Return    exec footclient
    $mod+n            exec footclient
    $mod+Tab          workspace back_and_forth
    
    # Kill focused window
    $mod+q    kill
    
    # Start your launcher
    $mod+d    exec $menu

    # Window switcher
    $mod+Shift+d    exec swaymsg \[con_id=$(swaymsg -t get_tree | jq -r '.nodes[].nodes[].nodes[], .nodes[].nodes[].floating_nodes[] | .. | (.id|tostring) + " " + .name?' | grep -e "[0-9]* ." | fuzzel --log-level=none --log-no-syslog -w 80 -I -d | awk '{print $1}')] focus

    # Music Player
    $mod+m    exec "$term ncmpcpp"

    # Open Camera
    # $mod+c         exec "mpv --no-osc --no-input-default-bindings --profile=low-latency --input-conf=/dev/null --title='webcam' $(ls /dev/video[0,2,4,6,8] | tail -n 1)"
    $mod+c    exec "ffplay -f v4l2 -input_format mjpeg -video_size 1920x1080 -window_title webcam -i $(ls /dev/video[0,2,4,6,8] | tail -n 1)"
    
    #showkeys
    $mod+p    exec "killall wshowkeys || wshowkeys -a bottom -t 1"
    # $mod+p    exec "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & showmethekey-gtk"
    
    # Volume control
    $mod+a    exec "$term pulsemixer"

    # Download manager
    $mod+u    exec dlmgr

    # Emoji selection
    $mod+i    exec menuunicode

    # Bluetooth
    $mod+comma    exec menu-bluetooth

    # Color picker
    $mod+Shift+p    exec grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:- | tail -n 1 | cut -d ' ' -f 4 | wl-copy

    # Layout stuff:
    $mod+t             split toggle
    $mod+underscore    gaps inner current set 0; gaps outer current set 0
    $mod+equal         gaps inner current plus 2; gaps outer current plus 2
    $mod+minus         gaps inner current minus 2; gaps outer current minus 2
    $mod+plus          gaps inner current set 4; gaps outer current set 4

    # You can "split" the current object of your focus 
    # for horizontal and vertical splits
    # respectively.
    #$mod+?    splith
    #$mod+?    splitv

    # Switch the current container between different layout styles
    $mod+Shift+s    layout stacking
    $mod+Shift+w    layout tabbed
    $mod+Shift+e    layout toggle split
    $mod+Shift+c    sticky toggle

    # Make the current focus fullscreen
    $mod+f    fullscreen

    # Toggle the current focus between tiling and floating mode
    $mod+Shift+space    floating toggle

    # Swap focus between the tiling area and the floating area
    $mod+space    focus mode_toggle

    # Move focus to the parent container
    $mod+Shift+a    focus parent

    # Scratchpad:
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    $mod+Shift+grave    move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    $mod+grave    scratchpad show

    # Reload the configuration file
    $mod+Shift+r    reload

    # Toggle monitor (dpms/power)
    $mod+Shift+m   exec "[[ $(swaymsg -t get_outputs -r | jq -e '.[] | .dpms') =~ "true" ]] && swaymsg 'output * dpms off' || swaymsg 'output * dpms on'"
    $mod+Shift+n   exec "[[ $(swaymsg -t get_outputs -r | jq -e '.[] | .dpms') =~ "true" ]] && swaymsg 'output * power off' || swaymsg 'output * power on'"

    # Exit sway (logs you out of your Wayland session)
    #$mod+? exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
    $mod+escape       exec "prompt 'Leave Sway?' 'swaymsg exit'"
    $mod+x            exec 'prompt "Shutdown computer?" "sudo -A shutdown now"'
    $mod+BackSpace    exec 'prompt "Reboot computer?" "sudo -A shutdown -r now"'

    # lock screen
    $mod+e    exec swaylock -eFfki ~/Pictures/lockscreen.png

    # Function keys
    #XF86MonBrightnessUp     exec light -A 5
    #XF86MonBrightnessDown  exec light -U 5
    XF86AudioLowerVolume     exec "wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
    XF86AudioRaiseVolume     exec "wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+"
    XF86AudioMute            exec "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    XF86MonBrightnessUp      exec "brightness -i"
    XF86MonBrightnessDown    exec "brightness -d"
    XF86Display              exec "wdisplays"
    XF86TouchpadToggle       exec toggletouchpad
    #screencapture
    $alt+Super_R     exec grim "pic-full-$(date '+%y%m%d-%H%M-%S').png"
    Shift+Super_R    exec wayscreenshot
    $mod+Super_R     exec wayrecord
    #Launch applications
    $mod+w    exec $BROWSER
    $mod+g    exec gimp-2.99
    $mod+b    exec "$term bicon ir vifm"
    $mod+s    exec "$term broot -h"
    $mod+y    exec "killall swaykbdd || swaykbdd"

    ### Clipboard 
    $mod+v          exec 'clipman pick --tool=CUSTOM --tool-args="$MENU -w 100 -d -i" --histpath="~/.local/share/clipman/clipman.json"'
    $mod+Shift+v    exec "wclipboard"

    ### Mounting Function
    $mod+F9     exec "menumount"
    $mod+F10    exec "menuumount"
    $mod+F12    exec "$term nmtui"
    F1          exec "footclient"
    F3          exec swaymsg input "$(swaymsg -t get_inputs | grep 'identifier.*keyboard' | cut -d'"' -f4)" xkb_switch_layout next
    F11         exec swaymsg input "$(swaymsg -t get_inputs | grep 'identifier.*keyboard' | cut -d'"' -f4)" xkb_switch_layout next
}

# Resizing containers:
mode "resize" {
    # These bindings trigger as soon as you enter the resize mode
    
    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym {
        h resize shrink width 10 px or 10 ppt
        k resize grow height 10 px or 10 ppt
        j resize shrink height 10 px or 10 ppt
        l resize grow width 10 px or 10 ppt
        
        # same bindings, but for the arrow keys
        Left     resize shrink width 10 px or 10 ppt
        Down     resize grow height 10 px or 10 ppt
        Up       resize shrink height 10 px or 10 ppt
        Right    resize grow width 10 px or 10 ppt
        
        # back to normal: Enter or Escape or $mod+r
        Return mode "default"
        Escape mode "default"
        $mod+r mode "default"
    }
}
bindsym $mod+r mode "resize"

set $opacity 1
for_window {
    [class=".*"] opacity $opacity
    [app_id=".*"] opacity $opacity
}

mode "opacity" {
    bindsym {
        0 opacity 1
        1 opacity 0.55
        2 opacity 0.65
        3 opacity 0.70
        4 opacity 0.75
        5 opacity 0.80
        6 opacity 0.85
        7 opacity 0.90
        8 opacity 0.95
        9 opacity 0.98

        Return mode "default"
        Escape mode "default"
        $mod+o mode "default"
    }
}
bindsym {
	$mod+o		mode "opacity"
	$mod+slash	opacity plus 0.02
	$mod+period	opacity minus 0.02
}

mode "switch" {
    bindsym {
       n      exec "wswitch next"
       p      exec "wswitch prev"
       Return mode "default"
       Escape mode "default"
       $mod+z mode "default"
    }
}
bindsym $mod+z exec "wswitch start", mode "switch"

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal
floating_minimum_size 1280 x 720
floating_maximum_size -1 x -1
for_window {
    [app_id="mpv"] floating enable
    [class="vlc"] floating enable
    [app_id="imv"] floating enable
    [app_id="vimiv"] floating enable
    [app_id="ffplay"] floating enable
    [app_id="wdisplays"] floating enable
    [app_id="qpwgraph"] floating enable
    [app_id="kvantummanager"] floating enable
    # [title="webcam"] floating enable

    # for firefox pip mode
    [title="Picture-in-Picture"] floating enable

    [app_id=".*blueberry.*"] floating enable
    [app_id=".*pavucontrol.*"] floating enable
    [app_id=$term title=".*pulsemixer.*"] floating enable
    [app_id=".*nextcloud.*"] floating enable, move container to scratchpad
    [app_id=".*showmethekey.*"] floating enable
    [app_id=".*showmethekey" title=".*Floating.*"] move absolute position 810 970, sticky on
}

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
# output * bg ~/Pictures/Desktop.png stretch


# Example configuration:
#output HDMI-A-2 pos 1920 0 res 768x1366 transform 90
#output eDP-1 pos 0 0 res 1920x1080
#workspace 3 output HDMI-A-2
#workspace 2 output edp-1
#
#output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs


### Input configuration
#
# Example configuration:
#
#input "2:14:SynPS/2_Synaptics_TouchPad" {
#    dwt enabled
#    tap enabled
#    natural_scroll enabled
#    middle_emulation enabled
#}

# Use `man xkeyboard-config` to view the options and `setxkbmap -query|print` to check the model
input {
    type:keyboard {
        xkb_layout "us,ir-mz"
        xkb_model "thinkpad"
        xkb_options "caps:escape_shifted_capslock,grp:shifts_toggle,altwin:prtsc_rwin,lv3:ralt_switch"
    }

    type:touchpad {
        # no click needed
        tap enabled
        # disable touchpad while typing
        dwt enabled
        # natural_scroll enabled
        middle_emulation enabled
    }
}

#input type:keyboard xkb_layout us-ir
#input * { xkb_options caps:escape }
#
#input 1267:32:Elan_TrackPoint {
#    pointer_accel 0.8
#}

# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

# Status Bar & Idle configuration
#
# Read `man 5 sway-bar` for more information about this section.
exec {
    swayidle -w \
        timeout 300 'swaylock -eFfki ~/Pictures/lockscreen.png' \
        timeout 600 'swaymsg "output * dpms off"' \
        resume 'swaymsg "output * dpms on"' \
        before-sleep 'swaylock -eFfki ~/Pictures/lockscreen.png' 
    yambar
}

# Status bar

# bar swaybar_command waybar
# bar {
#     font pango:monospace, FontAwesome 12
#     position top
#     status_command /usr/bin/i3status-rs ~/.config/i3status-rust/config.toml
#     modifier none
#     colors {
#         separator #666666
#         background #222222
#         statusline #dddddd
#         focused_workspace #0088CC #0088CC #ffffff
#         active_workspace #333333 #333333 #ffffff
#         inactive_workspace #333333 #333333 #888888
#         urgent_workspace #2f343a #900000 #ffffff
#     }
# }

# Update keyboard layout in bar
bindsym {
    # Shift+Shift_L     exec "pkill -SIGRTMIN+1 i3status-rs &"
    # Shift+Shift_R     exec "pkill -SIGRTMIN+1 i3status-rs &"
    # Mod1+Shift_R      exec "pkill -SIGRTMIN+1 waybar &"

    Shift+Shift_L    exec "wkb-switch -b &"
    Shift+Shift_R    exec "wkb-switch -b &"

    # Toggle Bar
    $mod+Shift+b    exec "killall yambar || yambar"
    # $mod+Shift+b    bar mode toggle
}

### Another status Bar
#bar {
#    position top
#
##    font Terminus (TTF) 28px
#    # When the status_command prints a new line to stdout, swaybar updates.
#    # The default just shows the current date and time.
#    status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done
#
#    colors {
#        statusline #ffffff
#        background #323232
#        inactive_workspace #32323200 #32323200 #5c5c5c
#    }
#}

### Another idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' \
#          resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

# GTK theme
exec_always {
        gsettings set org.gnome.desktop.interface cursor-theme Layan-cursors
        gsettings set org.gnome.desktop.interface cursor-size 40
        gsettings set org.gnome.desktop.interface gtk-theme Adwaita:dark
        gsettings set org.gnome.desktop.interface iconn-theme papirus-dark
        gsettings set org.gnome.desktop.interface font-name "Vazirmatn 14"
    }

include /etc/sway/config.d/*

## bindings help

## $mod+[1-9,0]		workspace[1-10]
## $mod+Shift+[1-9,0]	move to workspace[1-10]
## 
## $mod+a    pulsemixer 
## $mod+b    file manager
## $mod+c    webcam
## $mod+d    $MENU
## $mod+e    lockscreen
## $mod+f    fullscreen
## $mod+g    gimp
## $mod+h    focus left
## $mod+i    select emoji
## $mod+j    focus down
## $mod+k    focus up
## $mod+l    focus right
## $mod+m    music player
## $mod+n    foot client
## $mod+o    opacity
## $mod+p    showkeys
## $mod+q    kill
## $mod+r    resize
## $mod+s    search
## $mod+t    split toggle
## $mod+u    dlmgr
## $mod+v    clipboard
## $mod+w    $BROWSER
## $mod+x    shutdown
## $mod+y    swaykbdd
## $mod+z    switch mode    
## $mod+space    focus mod_toggle
## 
## $mod+Shift+a    focus parent
## $mod+Shift+b    toggle bar
## $mod+Shift+c    toggle sticky
## $mod+Shift+d    window switcher
## $mod+Shift+e    layout toggle split
## $mod+Shift+f
## $mod+Shift+g
## $mod+Shift+h    move left
## $mod+Shift+i
## $mod+Shift+j    move down
## $mod+Shift+k    move up
## $mod+Shift+l    move right
## $mod+Shift+m    monitor-dpms toggle
## $mod+Shift+n    monitor-power toggle
## $mod+Shift+o
## $mod+Shift+p    color picker
## $mod+Shift+q
## $mod+Shift+r    reload
## $mod+Shift+s    layout stacking
## $mod+Shift+t
## $mod+Shift+u
## $mod+Shift+v    clipman
## $mod+Shift+w    layout tabbed
## $mod+Shift+x
## $mod+Shift+y
## $mod+Shift+z
## $mod+Shift+space    floating toggle
## 
## F1    foot client
## F2
## F3    switch keyboard layout
## F4
## F5
## F6
## F7
## F8
## F9
## F10
## F11          switch keyboard layout
## F12
## print    fullscreen screenshot
## 
## Shift+F1
## Shift+F2
## Shift+F3
## Shift+F4
## Shift+F5
## Shift+F6
## Shift+F7
## Shift+F8
## Shift+F9
## Shift+F10
## Shift+F11
## Shift+F12
## Shift+print    screenshot
## 
## $mod+F1
## $mod+F2
## $mod+F3
## $mod+F4
## $mod+F5
## $mod+F6
## $mod+F7
## $mod+F8
## $mod+F9     mount
## $mod+F10    unmount
## $mod+F11
## $mod+F12    network manager tui
## 
## $mod+plus        default gaps
## $mod+equal        increase gaps
## $mod+minus        decrease gaps
## $mod+grave        scratchpad show
## $mod+Escape        exit
## $mod+BackSpace    reboot
## $mod+Return        $TERMINAL
## $mod+left        focus left
## $mod+right        focus right
## $mod+up        focus up
## $mod+down        focus down
## $mod+bracketleft    shrink width
## $mod+bracketright    grow width
## $mod+semicolon    shrink height
## $mod+apostrophe    grow height
## $mod+comma
## $mod+period  opacity minus 0.02
## $mod+slash   opacity plus 0.02
## 
## $mod+Shift+grave           move scratchpad
## $mod+underscore            zero gaps
## $mod+Shift+Escape
## $mod+Shift+BackSpace
## $mod+Shift+Return
## $mod+Shift+left            move left
## $mod+Shift+right           move right
## $mod+Shift+up              move up
## $mod+Shift+down            move down
## $mod+Shift+bracketleft     adjust shrink width
## $mod+Shift+bracketright    adjust grow width
## $mod+Shift+semicolon       adjust shrink height
## $mod+Shift+apostrophe      adjust grow height
## $mod+less
## $mod+greater
## $mod+question
##
## Shift_L+Shift_R    change keyboard layout
## $alt+Tab           focus next
