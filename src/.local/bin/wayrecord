#!/bin/sh

# Usage:
# `$0`: Ask for recording type via bemenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.


#updateicon() { \
#	echo "$1" > /tmp/recordingicon
#	pkill -RTMIN+9 "${STATUSBAR:?}"
#	}

# menu='bemenu --fn "monospace 14" --hb "#89cff0" --hf "#000000" --tf "#000000" --tb "#2dc7bc" -l 10 -P " üé• "'
menu="rofi -dmenu"

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
#	updateicon ""
#	pkill -RTMIN+9 "${STATUSBAR:?}"
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"
#	pkill swcursor
	exit
	}

screencast() { \
	wf-recorder -c libx264rgb -f "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
#	updateicon "‚è∫Ô∏èüéôÔ∏è"
       	}

video() { \
	wf-recorder -a -c libx264rgb -f "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
#	updateicon "‚è∫Ô∏è"
	}
window() { \
	wf-recorder -a -c libx264rgb -g "$(slurp)" -f "$HOME/window-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
#	updateicon "‚è∫Ô∏è"
	}
vaapi() { \
	wf-recorder -a -c h264_vaapi -d /dev/dri/renderD128 -f "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
#	updateicon "‚è∫Ô∏è"
	}

askrecording() { \
	choice=$(printf "screencast\\nvideo\\nvaapi\\nwindow" | $menu -i -p "Select recording style:")
	case "$choice" in
		screencast) screencast;;
		video) video;;
		vaapi) vaapi;;
		window) window;;
	esac
	}

asktoend() { \
	response=$(prompt "Recording still active. End recording?" "echo Yes") &&
	[ "$response" = "Yes" ] &&  killrecording
	}


case "$1" in
	screencast) screencast;;
	video) video;;
	kill) killrecording;;
	*) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
